DeckAdjMtxReconstructor: !hcv
  help: The model to reconstruct the deck adjacency matrix
  value: !hc
    TransformSingleCard: !hcv
      help: The MLP layer that tries to reconstruct the adjacency matrix row for the
        single card cube
      value: !hc
        Dropout_0: !hcv
          help: The dropout applied after the 1st hidden layer.
          value: !hc
            rate: !hcv
              help: The percent of values that get replaced with zero.
              value: 0
        Dropout_1: !hcv
          help: The dropout applied after the 1st hidden layer.
          value: !hc
            rate: !hcv
              help: The percent of values that get replaced with zero.
              value: 0
        Final: !hcv
          help: The last dense layer in the MLP.
          value: !hc
            use_bias: !hcv
              help: Whether to use bias on the output.
              value: true
        Hidden_0: !hcv
          help: The 1st hidden layer.
          value: !hc
            activation: !hcv
              choices: &id002 !!python/tuple
              - elu
              - selu
              - relu
              - tanh
              - sigmoid
              - linear
              - swish
              help: The activation function on the output of the layer.
              value: selu
            dims: !hcv
              help: The number of dimensions in the output of this layer.
              value: 1024
            use_bias: !hcv
              help: Whether to use bias on the output.
              value: true
        Hidden_1: !hcv
          help: The 1st hidden layer.
          value: !hc
            activation: !hcv
              choices: *id002
              help: The activation function on the output of the layer.
              value: selu
            dims: !hcv
              help: The number of dimensions in the output of this layer.
              value: 1024
            use_bias: !hcv
              help: Whether to use bias on the output.
              value: true
        num_hidden: !hcv
          help: The number of hidden layers in the MLP.
          value: 2
    temperature_reg_weight: !hcv
      help: The amount to scale the squared temperature by for loss.
      value: 0.004
EmbedCards: !hcv
  help: The embeddings for the card objects.
  value: !hc
    dims: !hcv
      help: The number of dimensions the items should be embedded into.
      value: 512
    trainable: !hcv
      help: Whether the embeddings should be trained.
      value: true
adam_ema_overwrite_frequency: !hcv
  help: The frequency to replace weights with their exponential moving averages.
  value: 2048
adam_learning_rate: !hcv
  help: The learning rate to use for adafactor
  value: 0.001
adam_weight_decay: !hcv
  help: The weight decay to use for adafactor
  value: 1.0e-04
adj_mtx_batch_size: !hcv
  help: The number of rows of the adjacency matrices to evaluate at a time.
  value: 64
cube_adj_mtx_weight: !hcv
  help: The weight to multiply the cube adjacency matrix loss by.
  value: 0
cube_batch_size: !hcv
  help: The number of cube samples to evaluate at a time
  value: 64
cube_noise_mean: !hcv
  help: The median of the noise distribution for cubes.
  value: 0.35
cube_noise_std: !hcv
  help: The median of the noise distribution for cubes.
  value: 0.1
deck_adj_mtx_weight: !hcv
  help: The weight to multiply the deck adjacency matrix loss by.
  value: 1
draftbots_weight: !hcv
  help: The weight to multiply the draftbot loss by.
  value: 0
dtype: !hcv
  choices: !!python/tuple
  - 16
  - 32
  - 64
  help: The size of the floating point numbers to use for calculations in the model
  value: 32
epochs_for_completion: !hcv
  help: The number of epochs it should take to go through the entire dataset.
  value: 1
optimizer: !hcv
  choices: !!python/tuple
  - adam
  - adamax
  - lazyadam
  - rectadam
  - adafactor
  - lamb
  - adadelta
  - nadam
  - rmsprop
  - adafactor
  help: The optimizer type to use for optimization
  value: adam
pick_batch_size: !hcv
  help: The number of picks to evaluate at a time
  value: 768
recommender_weight: !hcv
  help: The weight to multiply the recommender loss by.
  value: 0
use_async_execution: !hcv
  help: Whether to enable experimental asynchronous execution.
  value: false
use_xla: !hcv
  help: Whether to use xla to speed up calculations.
  value: true
